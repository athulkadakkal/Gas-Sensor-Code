#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 4);  // set the LCD address to 0x27 for a 16 chars and 4 line display

/*************************** Gas Sensor Code ***************************/
#define MQ_PIN_MQ2                   (A0)
#define MQ_PIN_MQ9                   (A1)
#define MQ_PIN_MQ135                 (A2)
#define MQ_PIN_MQ137                 (A3)
#define RL_VALUE                     (5)
#define RO_CLEAN_AIR_FACTOR          (9.83)

#define CALIBARAION_SAMPLE_TIMES     (50)
#define CALIBRATION_SAMPLE_INTERVAL  (500)
#define READ_SAMPLE_INTERVAL         (50)
#define READ_SAMPLE_TIMES            (5)

#define GAS_ALCOHOL_ETHANOL          (0)
#define GAS_FLAMMABLE_GASES          (1)
#define GAS_CO                       (2)
#define GAS_CO2                      (3)
#define GAS_AMMONIA                  (4)

float AlcoholEthanolCurve[3] = {2.3, 0.53, -0.44};
float FlammableGasesCurve[3] = {2.3, 0.21, -0.47};
float COCurve[3] = {2.3, 0.72, -0.34};
float CO2Curve[3] = {2.3, 0.21, -0.47};  // Adjust the values according to MQ135 calibration for CO2
float AmmoniaCurve[3] = {2.3, 0.21, -0.47};
float RoAlcoholEthanol = 10;
float RoFlammableGases = 10;
float RoCO = 10;
float RoCO2 = 10;  // Adjust the Ro value for CO2
float RoAmmonia = 10;

void setup() {
  lcd.init();
  lcd.backlight();
  lcd.setCursor(3, 0);
  lcd.print("Gas Sensor & LCD");
  lcd.setCursor(0, 1);
  lcd.print("Initialization...");
  delay(2000);

  Serial.begin(9600);

  Serial.print("Calibrating MQ-2...\n");
  RoAlcoholEthanol = MQCalibration(MQ_PIN_MQ2);
  Serial.print("Calibration MQ-2 is done...\n");
  Serial.print("Ro Alcohol_Ethanol=");
  Serial.print(RoAlcoholEthanol);
  Serial.print("kohm");
  Serial.print("\n");

  Serial.print("Calibrating MQ-9...\n");
  RoFlammableGases = MQCalibration(MQ_PIN_MQ9);
  Serial.print("Calibration MQ-9 is done...\n");
  Serial.print("Ro Flammable_Gases=");
  Serial.print(RoFlammableGases);
  Serial.print("kohm");
  Serial.print("\n");

  Serial.print("Calibrating MQ-135...\n");
  RoCO = MQCalibration(MQ_PIN_MQ135);
  Serial.print("Calibration MQ-135 is done...\n");
  Serial.print("Ro CO=");
  Serial.print(RoCO);
  Serial.print("kohm");
  Serial.print("\n");

  Serial.print("Calibrating MQ-137...\n");
  RoAmmonia = MQCalibration(MQ_PIN_MQ137);
  Serial.print("Calibration MQ-137 is done...\n");
  Serial.print("Ro Ammonia=");
  Serial.print(RoAmmonia);
  Serial.print("kohm");
  Serial.print("\n");
}

void loop() {
  float alcoholEthanolConcentration = MQGetGasPercentage(MQRead(MQ_PIN_MQ2) / RoAlcoholEthanol, GAS_ALCOHOL_ETHANOL);
  float flammableGasesConcentration = MQGetGasPercentage(MQRead(MQ_PIN_MQ9) / RoFlammableGases, GAS_FLAMMABLE_GASES);
  float coConcentration = MQGetGasPercentage(MQRead(MQ_PIN_MQ135) / RoCO, GAS_CO);
  float co2Concentration = MQGetGasPercentage(MQRead(MQ_PIN_MQ135) / RoCO2, GAS_CO2);
  float ammoniaConcentration = MQGetGasPercentage(MQRead(MQ_PIN_MQ137) / RoAmmonia, GAS_AMMONIA);

  Serial.print("Alcohol_Ethanol: ");
  Serial.print(alcoholEthanolConcentration);
  Serial.print(" ppm\t");

  Serial.print("Flammable_Gases: ");
  Serial.print(flammableGasesConcentration);
  Serial.print(" ppm\t");

  Serial.print("CO: ");
  Serial.print(coConcentration);
  Serial.print(" ppm\t");

  Serial.print("CO2: ");
  Serial.print(co2Concentration);
  Serial.print(" ppm\t");

  Serial.print("Ammonia: ");
  Serial.print(ammoniaConcentration);
  Serial.print(" ppm\t");

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Alcohol_Ethanol: ");
  lcd.print(alcoholEthanolConcentration);
  lcd.print(" ppm");

  lcd.setCursor(0, 1);
  lcd.print("Flammable_Gases: ");
  lcd.print(flammableGasesConcentration);
  lcd.print(" ppm");

  lcd.setCursor(0, 2);
  lcd.print("CO: ");
  lcd.print(coConcentration);
  lcd.print(" ppm");

  lcd.setCursor(0, 3);
  lcd.print("CO2: ");
  lcd.print(co2Concentration);
  lcd.print(" ppm");

  delay(5000);  // Adjust the delay as needed
}

float MQResistanceCalculation(int raw_adc) {
  return (((float)RL_VALUE * (1023 - raw_adc) / raw_adc));
}

float MQCalibration(int mq_pin) {
  int i;
  float val = 0;

  for (i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) {
    val += MQResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val / CALIBARAION_SAMPLE_TIMES;

  val = val / RO_CLEAN_AIR_FACTOR;

  return val;
}

float MQRead(int mq_pin) {
  int i;
  float rs = 0;

  for (i = 0; i < READ_SAMPLE_TIMES; i++) {
    rs += MQResistanceCalculation(analogRead(mq_pin));
    delay(READ_SAMPLE_INTERVAL);
  }

  rs = rs / READ_SAMPLE_TIMES;

  return rs;
}

int MQGetGasPercentage(float rs_ro_ratio, int gas_id) {
  if (gas_id == GAS_ALCOHOL_ETHANOL) {
    return MQGetPercentage(rs_ro_ratio, AlcoholEthanolCurve);
  } else if (gas_id == GAS_FLAMMABLE_GASES) {
    return MQGetPercentage(rs_ro_ratio, FlammableGasesCurve);
  } else if (gas_id == GAS_CO) {
    return MQGetPercentage(rs_ro_ratio, COCurve);
  } else if (gas_id == GAS_CO2) {
    return MQGetPercentage(rs_ro_ratio, CO2Curve);
  } else if (gas_id == GAS_AMMONIA) {
    return MQGetPercentage(rs_ro_ratio, AmmoniaCurve);
  }

  return 0;
}

int MQGetPercentage(float rs_ro_ratio, float *pcurve) {
  return (int)(pow(10, ((log10(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0]));
}
